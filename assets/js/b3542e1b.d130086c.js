"use strict";(self.webpackChunkdeveloper_site=self.webpackChunkdeveloper_site||[]).push([[482],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(n),c=s,k=m["".concat(l,".").concat(c)]||m[c]||p[c]||r;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6863:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var a=n(3117),s=n(102),r=(n(7294),n(3905)),i=["components"],o={title:"Ask for Help v2",sidebar_label:"Ask for Help v2"},l=void 0,u={unversionedId:"tech/usecase/ask-for-helpv2",id:"tech/usecase/ask-for-helpv2",title:"Ask for Help v2",description:"Models",source:"@site/docs/tech/usecase/ask-for-helpv2.md",sourceDirName:"tech/usecase",slug:"/tech/usecase/ask-for-helpv2",permalink:"/developer/docs/tech/usecase/ask-for-helpv2",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tech/usecase/ask-for-helpv2.md",tags:[],version:"current",lastUpdatedAt:1645024905,formattedLastUpdatedAt:"2/16/2022",frontMatter:{title:"Ask for Help v2",sidebar_label:"Ask for Help v2"},sidebar:"tech",previous:{title:"Ask for Help",permalink:"/developer/docs/tech/usecase/ask-for-help"},next:{title:"Survey Application",permalink:"/developer/docs/tech/usecase/survey-app"}},d={},p=[{value:"Models",id:"models",level:2},{value:"Task",id:"task",level:3},{value:"Transaction",id:"transaction",level:3},{value:"Answer to a question",id:"answer-to-a-question",level:4},{value:"Ignore a question",id:"ignore-a-question",level:4},{value:"Report a question",id:"report-a-question",level:4},{value:"Pick the best answer",id:"pick-the-best-answer",level:4},{value:"Ask some more users",id:"ask-some-more-users",level:4},{value:"Report an answer",id:"report-an-answer",level:4},{value:"Message",id:"message",level:3},{value:"Question to answer",id:"question-to-answer",level:4},{value:"Answer to question",id:"answer-to-question",level:4},{value:"Answer picked",id:"answer-picked",level:4},{value:"Norm",id:"norm",level:3},{value:"SetUp Configuration",id:"setup-configuration",level:2},{value:"Task",id:"task-1",level:3},{value:"Transaction",id:"transaction-1",level:3},{value:"Message",id:"message-1",level:3},{value:"Norm",id:"norm-1",level:3},{value:"Community Norms",id:"community-norm",level:3}],m={toc:p};function c(e){var t=e.components,n=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"models"},"Models"),(0,r.kt)("h3",{id:"task"},"Task"),(0,r.kt)("p",null,"The Task of the ",(0,r.kt)("em",{parentName:"p"},"Ask for Help v2")," use case is characterised by the following parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"goal.name")," contains the question asked by a user.")),(0,r.kt)("p",null,"Its attributes are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"domain")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"studying_career"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"local_university"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"local_things"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"physical_activity"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"cultural_interests"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"food_and_cooking"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"cinema_theatre"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"music"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"arts_and_crafts"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"life_ponders"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"varia_misc"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"The chosen domain of the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"domainInterest")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"similar"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"indifferent"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"different"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"The kind of interest in the domain the user should have to receive the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"beliefsAndValues")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"similar"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"indifferent"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"different"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"The kind of similarity in beliefs and values the user should have to receive the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sensitive")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the question is sensitive or not, if it is sensitive the bot will let other people know to take extra care in answering the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"anonymous")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"socialCloseness")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"similar"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"indifferent"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"different"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"The kind of social closeness the user should have to receive the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"positionOfAnswerer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"nearby"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"anywhere"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"How close the users should be to receive the question, if nearby is chosen the question has not the possibility to be postponed because the question requires a fast answer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"maxUsers")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"integer")),(0,r.kt)("td",{parentName:"tr",align:null},"The maximum number of users to which propose the question and also in the case the user requests to ask to more users")))),(0,r.kt)("h3",{id:"transaction"},"Transaction"),(0,r.kt)("p",null,"The following transactions are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"answer to a question;"),(0,r.kt)("li",{parentName:"ul"},"ignore a question;"),(0,r.kt)("li",{parentName:"ul"},"report a question;"),(0,r.kt)("li",{parentName:"ul"},"pick the best answer;"),(0,r.kt)("li",{parentName:"ul"},"ask some more users;"),(0,r.kt)("li",{parentName:"ul"},"report an answer.")),(0,r.kt)("h4",{id:"answer-to-a-question"},"Answer to a question"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"answerTransaction"),"."),(0,r.kt)("p",null,"Its attributes are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"answer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The answer given by the user to the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"anonymous")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown")))),(0,r.kt)("h4",{id:"ignore-a-question"},"Ignore a question"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"notAnswerTransaction"),"."),(0,r.kt)("h4",{id:"report-a-question"},"Report a question"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"reportQuestionTransaction"),"."),(0,r.kt)("p",null,"Its attributes are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"reason")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"abusive"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"spam"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"The reason why the question was reported")))),(0,r.kt)("h4",{id:"pick-the-best-answer"},"Pick the best answer"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"bestAnswerTransaction"),"."),(0,r.kt)("p",null,"Its attributes are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transactionId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the picked answer transaction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"reason")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The reason why the specific answer was picked")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"helpful")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"notAtAllHelpful"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"slightlyHelpful"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"somewhatHelpful"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"veryHelpful"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"extremelyHelpful"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"How helpful is the bot in connecting with users following intentions")))),(0,r.kt)("h4",{id:"ask-some-more-users"},"Ask some more users"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"moreAnswerTransaction"),"."),(0,r.kt)("h4",{id:"report-an-answer"},"Report an answer"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"reportAnswerTransaction"),"."),(0,r.kt)("p",null,"Its attributes are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transactionId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the answer transaction that was reported")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"reason")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"abusive"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"spam"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"The reason why the specific answer was reported")))),(0,r.kt)("h3",{id:"message"},"Message"),(0,r.kt)("p",null,"The following messages are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"notify there is a new question to answer to;"),(0,r.kt)("li",{parentName:"ul"},"notify there is a new answer to a question;"),(0,r.kt)("li",{parentName:"ul"},"notify the provided answer has been marked as the preferred one.")),(0,r.kt)("h4",{id:"question-to-answer"},"Question to answer"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"QuestionToAnswerMessage"),"."),(0,r.kt)("p",null,"Its attributes are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"taskId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the task associated with the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"question")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The question to answer to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"userId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the user who proposed the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sensitive")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the question is sensitive or not, if it is sensitive the bot will let other people know to take extra care in answering the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"anonymous")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"positionOfAnswerer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"enum")," ","[",(0,r.kt)("inlineCode",{parentName:"td"},"nearby"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"anywhere"),"]"),(0,r.kt)("td",{parentName:"tr",align:null},"How close the users should be to receive the question, if nearby is chosen the question has not the possibility to be postponed because the question requires a fast answer")))),(0,r.kt)("h4",{id:"answer-to-question"},"Answer to question"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"AnsweredQuestionMessage"),"."),(0,r.kt)("p",null,"Its attributes are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"taskId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the task associated with the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"question")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The question to answer to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transactionId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the transaction associated to the answer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"answer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The answer to the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"userId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the user who answered the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"anonymous")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the user prefers to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown")))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If access to the complete list of answers is required, this can be done by accessing the updated details of a task."))),(0,r.kt)("h4",{id:"answer-picked"},"Answer picked"),(0,r.kt)("p",null,"It is identified by the label ",(0,r.kt)("inlineCode",{parentName:"p"},"AnsweredPickedMessage"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"taskId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the task associated with the question")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"question")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The question for which was picked the answer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transactionId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The id of the transaction associated to the answer")))),(0,r.kt)("h3",{id:"norm"},"Norm"),(0,r.kt)("p",null,"The following norms are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"when the task is created filter the possible users to ask about and ask them;"),(0,r.kt)("li",{parentName:"ul"},"notify user if it can help with a question;"),(0,r.kt)("li",{parentName:"ul"},"provide an answer to a question;"),(0,r.kt)("li",{parentName:"ul"},"notify the questioner about the answer;"),(0,r.kt)("li",{parentName:"ul"},"notify to the users about best answer;"),(0,r.kt)("li",{parentName:"ul"},"notify the user that its answer is picked;"),(0,r.kt)("li",{parentName:"ul"},"ask more users;"),(0,r.kt)("li",{parentName:"ul"},"nothing to do with some transactions only store them.")),(0,r.kt)("h2",{id:"setup-configuration"},"SetUp Configuration"),(0,r.kt)("h3",{id:"task-1"},"Task"),(0,r.kt)("p",null,"The app logic defined in the hub contains in the section ",(0,r.kt)("inlineCode",{parentName:"p"},"Attributes"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "properties": {\n    "domain": {\n      "description": "The chosen domain of the question",\n      "type": "string",\n      "nullable": false,\n      "enum": {\n        "0": "studying_career",\n        "1": "local_university",\n        "2": "local_things",\n        "3": "physical_activity",\n        "4": "cultural_interests",\n        "5": "food_and_cooking",\n        "6": "cinema_theatre",\n        "7": "music",\n        "8": "arts_and_crafts",\n        "9": "life_ponders",\n        "10": "varia_misc"\n      }\n    },\n    "domainInterest": {\n      "description": "The kind of interest in the domain the user should have to receive the question",\n      "type": "string",\n      "nullable": false,\n      "enum": {\n        "0": "similar",\n        "1": "indifferent",\n        "2": "different"\n      }\n    },\n    "beliefsAndValues": {\n      "description": "The kind of similarity in beliefs and values the user should have to receive the question",\n      "type": "string",\n      "nullable": false,\n      "enum": {\n        "0": "similar",\n        "1": "indifferent",\n        "2": "different"\n      }\n    },\n    "sensitive": {\n      "description": "Whether the question is sensitive or not, if it is sensitive the bot will let other people know to take extra care in answering the question",\n      "type": "boolean",\n      "default": "false",\n      "nullable": false\n    },\n    "anonymous": {\n      "description": "Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",\n      "type": "boolean",\n      "default": "false",\n      "nullable": false\n    },\n    "socialCloseness": {\n      "description": "The kind of social closeness the user should have to receive the question",\n      "type": "string",\n      "nullable": false,\n      "enum": {\n        "0": "similar",\n        "1": "indifferent",\n        "2": "different"\n      }\n    },\n    "positionOfAnswerer": {\n      "description": "How close the users should be to receive the question, if nearby is chosen the question has not the possibility to be postponed because the question requires a fast answer",\n      "type": "string",\n      "nullable": false,\n      "enum": {\n        "0": "nearby",\n        "1": "anywhere"\n      }\n    },\n    "maxUsers": {\n      "description": "The maximum number of users to which propose the question and also in the case the user requests to ask to more users",\n      "type": "integer",\n      "nullable": false,\n      "minimum": 1,\n      "default": "5"\n    }\n  },\n  "required": {\n    "0": "domain",\n    "1": "domainInterest",\n    "2": "beliefsAndValues",\n    "3": "sensitive",\n    "4": "anonymous",\n    "5": "socialCloseness",\n    "6": "positionOfAnswerer",\n    "7": "maxUsers"\n  }\n}\n')),(0,r.kt)("h3",{id:"transaction-1"},"Transaction"),(0,r.kt)("p",null,"The app logic defined in the hub contains in the section ",(0,r.kt)("inlineCode",{parentName:"p"},"Transactions"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "answerTransaction": {\n    "title": "Answer to a question",\n    "type": "object",\n    "properties": {\n      "answer": {\n        "type": "string",\n        "description": "The answer given by the user to the question"\n      },\n      "anonymous": {\n        "description": "Whether to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",\n        "type": "boolean",\n        "default": "false",\n        "nullable": false\n      }\n    },\n    "required": {\n      "0": "answer",\n      "1": "anonymous"\n    }\n  },\n  "notAnswerTransaction": {\n    "title": "Ignore a question",\n    "type": "object",\n    "nullable": true\n  },\n  "reportQuestionTransaction": {\n    "title": "Report a question",\n    "type": "object",\n    "properties": {\n      "reason": {\n        "description": "The reason why the question was reported",\n        "type": "string",\n        "nullable": false,\n        "enum": {\n          "0": "abusive",\n          "1": "spam"\n        }\n      }\n    },\n    "required": {\n      "0": "reason"\n    }\n  },\n  "bestAnswerTransaction": {\n    "title": "Pick the best answer",\n    "type": "object",\n    "properties": {\n      "transactionId": {\n        "description": "The id of the picked answer transaction",\n        "type": "string",\n        "nullable": false\n      },\n      "reason": {\n        "description": "The reason why the specific answer was picked",\n        "type": "string",\n        "nullable": false\n      },\n      "helpful": {\n        "description": "How well the bot is good in connecting with users following intentions",\n        "type": "string",\n        "nullable": false,\n        "enum": {\n          "0": "notAtAllHelpful",\n          "1": "slightlyHelpful",\n          "2": "somewhatHelpful",\n          "3": "veryHelpful",\n          "4": "extremelyHelpful"\n        }\n      }\n    },\n    "required": {\n      "0": "transactionId",\n      "1": "reason",\n      "2": "helpful"\n    }\n  },\n  "moreAnswerTransaction": {\n    "title": "Ask some more users",\n    "type": "object",\n    "nullable": true\n  },\n  "reportAnswerTransaction": {\n    "title": "Report an answer",\n    "type": "object",\n    "properties": {\n      "transactionId": {\n        "description": "The id of the answer transaction that was reported",\n        "type": "string",\n        "nullable": false\n      },\n      "reason": {\n        "description": "The reason why the specific answer was reported",\n        "type": "string",\n        "nullable": false,\n        "enum": {\n          "0": "abusive",\n          "1": "spam"\n        }\n      }\n    },\n    "required": {\n      "0": "transactionId",\n      "1": "reason"\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"message-1"},"Message"),(0,r.kt)("p",null,"The app logic defined in the hub contains in the section ",(0,r.kt)("inlineCode",{parentName:"p"},"Callbacks"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "QuestionToAnswerMessage": {\n    "title": "Question to answer",\n    "type": "object",\n    "properties": {\n      "taskId": {\n        "description": "The id of the task associated with the question",\n        "type": "string",\n        "nullable": false\n      },\n      "question": {\n        "description": "The question to answer to",\n        "type": "string",\n        "nullable": false\n      },\n      "userId": {\n        "description": "The id of the user who proposed the question",\n        "type": "string",\n        "nullable": false\n      },\n      "sensitive": {\n        "description": "Whether the question is sensitive or not, if it is sensitive the bot will let other people know to take extra care in answering the question",\n        "type": "boolean",\n        "default": "false",\n        "nullable": false\n      },\n      "anonymous": {\n        "description": "Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",\n        "type": "boolean",\n        "default": "false",\n        "nullable": false\n      },\n      "positionOfAnswerer": {\n        "description": "How close the users should be to receive the question, if nearby is chosen the question has not the possibility to be postponed because the question requires a fast answer",\n        "type": "string",\n        "nullable": false,\n        "enum": {\n          "0": "nearby",\n          "1": "anywhere"\n        }\n      }\n    },\n    "required": {\n      "0": "taskId",\n      "1": "question",\n      "2": "userId",\n      "3": "sensitive",\n      "4": "anonymous",\n      "5": "positionOfAnswerer"\n    }\n  },\n  "AnsweredQuestionMessage": {\n    "title": "Answer to question",\n    "type": "object",\n    "properties": {\n      "taskId": {\n        "description": "The id of the task associated with the question",\n        "type": "string",\n        "nullable": false\n      },\n      "question": {\n        "description": "The question to answer to",\n        "type": "string",\n        "nullable": false\n      },\n      "transactionId": {\n        "description": "The id of the transaction associated to the answer",\n        "type": "string",\n        "nullable": false\n      },\n      "answer": {\n        "description": "The answer to the question",\n        "type": "string",\n        "nullable": false\n      },\n      "userId": {\n        "description": "The id of the user who answered the question",\n        "type": "string",\n        "nullable": false\n      },\n      "anonymous": {\n        "description": "Whether the user prefers to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",\n        "type": "boolean",\n        "default": "false",\n        "nullable": false\n      }\n    },\n    "required": {\n      "0": "taskId",\n      "1": "question",\n      "2": "transactionId",\n      "3": "answer",\n      "4": "userId",\n      "5": "anonymous"\n    }\n  },\n  "AnsweredPickedMessage": {\n    "title": "Answer picked",\n    "type": "object",\n    "properties": {\n      "taskId": {\n        "description": "The id of the task associated with the question",\n        "type": "string",\n        "nullable": false\n      },\n      "question": {\n        "description": "The question for which was picked the answer",\n        "type": "string",\n        "nullable": false\n      },\n      "transactionId": {\n        "description": "The id of the transaction associated to the answer",\n        "type": "string",\n        "nullable": false\n      }\n    },\n    "required": {\n      "0": "taskId",\n      "1": "question",\n      "2": "transactionId"\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"norm-1"},"Norm"),(0,r.kt)("p",null,"The app logic defined in the hub contains in the section ",(0,r.kt)("inlineCode",{parentName:"p"},"Norms"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"[\n  {\n    \"description\": \"When the task is created filter the possible users to ask about and ask them\",\n    \"whenever\": \"is_received_created_task() and who_to_ask(Users)\",\n    \"thenceforth\": \"add_created_transaction() and send_messages(Users,'notifyNewQuestionAndAnswer',json([]))\",\n    \"ontology\": \":- use_module(library(random)).  :- dynamic who_to_ask/1, users_by_closeness/2, users_by_social_closeness/2, users_by_beliefs_and_values/2, users_by_domain_interest/2, get_profile_attribues_by_beliefs_and_values/1, get_profile_attribues_by_domain_interest/1, domain_attributes/2, attributes_similars_to_question/1 .  who_to_ask(Users) :- ( get_task_state_attribute(Unasked,'unaskedUserIds') -> true ; ( get_app_users_except_me(UsersExceptMe), random_permutation(AppUsers,UsersExceptMe), put_task_state_attribute('appUsers',AppUsers), users_by_closeness(ClosenessUsers,AppUsers), users_by_social_closeness(SocialClosenessUsers,AppUsers), wenet_product_user_values(Tmp1,ClosenessUsers,SocialClosenessUsers), users_by_beliefs_and_values(BeliefsAndValuesUsers,AppUsers), wenet_product_user_values(Tmp2,Tmp1,BeliefsAndValuesUsers), users_by_domain_interest(DomainInterestUsers,AppUsers), wenet_product_user_values(Tmp3,Tmp2,DomainInterestUsers), wenet_sort_user_values_by_value(Sorted,Tmp3), reverse(Sorted,WhoToAsk), put_task_state_attribute('whoToAskUsers',WhoToAsk), wenet_user_values_to_user_ids(Unasked,WhoToAsk) ) ), !, get_task_attribute_value(MaxUsers,'maxUsers'), ( ( append(Users,NewUnasked,Unasked), length(Users,MaxUsers) ) -> true ; ( Users = Unasked, NewUnasked = [] )  ), !, put_task_state_attribute('unaskedUserIds',NewUnasked), !, retractall(who_to_ask(_)), asserta(who_to_ask(Users)).  users_by_closeness(ClosenessUsers,Users) :- ( ( get_task_attribute_value(PositionOfAnswerer,'positionOfAnswerer'), =(PositionOfAnswerer,'nearby') ) -> normalized_closeness(ClosenessUsers,Users,1000000)  ; wenet_initialize_user_values(ClosenessUsers,Users,1.0) ), put_task_state_attribute('closenessUsers',ClosenessUsers).  users_by_social_closeness(SocialClosenessUsers,Users) :- ( ( get_task_attribute_value(SocialClosenessAttr,'socialCloseness'), not(=(SocialClosenessAttr,'indifferent')) ) -> ( normalized_social_closeness(Socialness,Users), ( =(SocialClosenessAttr,'similar') -> SocialClosenessUsers = Socialness ; wenet_negate_user_value(SocialClosenessUsers,Socialness) ) )  ; wenet_initialize_user_values(SocialClosenessUsers,Users,1.0) ), put_task_state_attribute('socialClosenessUsers',SocialClosenessUsers).  users_by_beliefs_and_values(BeliefsAndValuesUsers,Users) :- ( ( get_task_attribute_value(BeliefsAndValuesAttr,'beliefsAndValues'), not(=(BeliefsAndValuesAttr,'indifferent')) ) -> ( get_profile_attribues_by_beliefs_and_values(Attributes), normalized_diversity(Diversity,Users,Attributes), ( =(BeliefsAndValuesAttr,'similar') -> wenet_negate_user_value(BeliefsAndValuesUsers,Diversity) ; BeliefsAndValuesUsers = Diversity ) )  ; wenet_initialize_user_values(BeliefsAndValuesUsers,Users,1.0) ), put_task_state_attribute('beliefsAndValuesUsers',BeliefsAndValuesUsers).  get_profile_attribues_by_beliefs_and_values(['meanings.excitement','meanings.promotion','meanings.existence','meanings.suprapersonal','meanings.interactive','meanings.normative','meanings.extraversion','meanings.agreeableness','meanings.consientiousness','meanings.neuroticism','meanings.openness']).  users_by_domain_interest(DomainInterestUsers,Users) :- ( ( get_task_attribute_value(DomainInterestAttr,'domainInterest'), not(=(DomainInterestAttr,'indifferent')) ) -> ( get_profile_attribues_by_domain_interest(Attributes), normalized_diversity(Diversity,Users,Attributes), ( =(DomainInterestAttr,'similar') -> wenet_negate_user_value(DomainInterestUsers,Diversity) ; DomainInterestUsers = Diversity ) )  ; wenet_initialize_user_values(DomainInterestUsers,Users,1.0) ), put_task_state_attribute('domainInterestUsers',DomainInterestUsers).   get_profile_attribues_by_domain_interest(Attributes) :- get_task_attribute_value(Domain,'domain'), domain_attributes(Domain,Attributes), !, retractall(get_profile_attribues_by_domain_interest(_)), asserta(get_profile_attribues_by_domain_interest(Attributes)) .  domain_attributes('studying_career',['competences.u_active','competences.u_read','competences.u_essay','competences.u_org','competences.u_balance','competences.u_assess','competences.u_theory','competences.u_pract']). domain_attributes('local_university',['competences.c_locfac','competences.c_accom']). domain_attributes('local_things',['competences.c_accom']). domain_attributes('physical_activity',['competences.c_team_sp','competences.c_ind_sp','competences.c_watch_sp']). domain_attributes('cultural_interests',['competences.c_lit','competences.c_creatlit','competences.c_perf_art','competences.c_musgall']). domain_attributes('food_and_cooking',['competences.c_food','competences.c_eating']). domain_attributes('cinema_theatre',['competences.c_plays','competences.c_perf_plays']). domain_attributes('music',['competences.c_app_mus','competences.c_perf_mus']). domain_attributes('arts_and_crafts',['competences.c_perf_art','competences.c_musgall']). domain_attributes('life_ponders',Attributes) :- attributes_similars_to_question(Attributes) . domain_attributes('varia_misc',Attributes) :- attributes_similars_to_question(Attributes) .  attributes_similars_to_question(Attributes) :- ( get_task_goal_name(Question), my_profile_attributes_similars_to(SimAttributes,Question,0.4) -> true ; SimAttributes = [] ), !, ( length(SimAttributes,0) -> Attributes = ['competences.u_active','competences.u_read','competences.u_essay','competences.u_org','competences.u_balance','competences.u_assess','competences.u_theory','competences.u_pract','competences.c_locfac','competences.c_accom','competences.c_team_sp','competences.c_ind_sp','competences.c_watch_sp','competences.c_lit','competences.c_creatlit','competences.c_perf_art','competences.c_musgall','competences.c_food','competences.c_eating','competences.c_plays','competences.c_perf_plays','competences.c_app_mus','competences.c_perf_mus'] ; Attributes = SimAttributes ), retractall(attributes_similars_to_question(_)), asserta(attributes_similars_to_question(Attributes)) .\"\n  },\n  {\n    \"description\": \"Notify user if it can help with a question\",\n    \"whenever\": \"is_received(_,'notifyNewQuestionAndAnswer',_) and get_task_id(TaskId) and get_task_goal_name(Question) and get_task_requester_id(RequesterId) and get_task_attribute_value(Sensitive,'sensitive') and get_task_attribute_value(Sensitive,'sensitive') and get_task_attribute_value(Anonymous,'anonymous') and get_task_attribute_value(PositionOfAnswerer,'positionOfAnswerer')\",\n    \"thenceforth\": \"send_user_message('QuestionToAnswerMessage',json([taskId=TaskId,question=Question,userId=RequesterId,sensitive=Sensitive,anonymous=Anonymous,positionOfAnswerer=PositionOfAnswerer]))\",\n    \"ontology\": null\n  },\n  {\n    \"description\": \"Provide an answer to a question\",\n    \"whenever\": \"is_received_do_transaction('answerTransaction',Attributes) and not(is_task_closed()) and get_attribute(Answer,answer,Attributes) and get_attribute(Anonymous,anonymous,Attributes) and get_task_requester_id(RequesterId)\",\n    \"thenceforth\": \"add_message_transaction() and send_message(RequesterId,'answerTransaction',json([answer=Answer,anonymous=Anonymous]))\",\n    \"ontology\": null\n  },\n  {\n    \"description\": \"Notify the questioner about the answer\",\n    \"whenever\": \"is_received(SenderId,'answerTransaction',Attributes) and get_attribute(Answer,answer,Attributes) and get_attribute(Anonymous,anonymous,Attributes) and get_task_goal_name(Question) and get_task_id(TaskId) and get_transaction_id(TransactionId)\",\n    \"thenceforth\": \"send_user_message('AnsweredQuestionMessage',json([taskId=TaskId,question=Question,transactionId=TransactionId,answer=Answer,userId=SenderId,anonymous=Anonymous]))\",\n    \"ontology\": null\n  },\n  {\n    \"description\": \"Notify to the users about best answer\",\n    \"whenever\": \"is_received_do_transaction('bestAnswerTransaction',Attributes) and not(is_task_closed()) and get_attribute(TransactionId,transactionId,Attributes) and get_transaction(Transaction,TransactionId) and wenet_actioneer_id_of_transaction(ActioneerId,Transaction)\",\n    \"thenceforth\": \"add_message_transaction() and close_task() and send_message(ActioneerId,'bestAnswerTransaction',json([transactionId=TransactionId]))\",\n    \"ontology\": null\n  },\n  {\n    \"description\": \"Notify the user that its answer is picked\",\n    \"whenever\": \"is_received(_,'bestAnswerTransaction',Attributes) and get_attribute(TransactionId,transactionId,Attributes) and get_task_goal_name(Question) and get_task_id(TaskId)\",\n    \"thenceforth\": \"send_user_message('AnsweredPickedMessage',json([taskId=TaskId,question=Question,transactionId=TransactionId]))\",\n    \"ontology\": null\n  },\n  {\n    \"description\": \"Ask more users\",\n    \"whenever\": \"is_received_do_transaction('moreAnswerTransaction',_) and not(is_task_closed()) and who_to_ask(Users)\",\n    \"thenceforth\": \"add_message_transaction() and send_messages(Users,'notifyNewQuestionAndAnswer',json([]))\",\n    \"ontology\": null\n  },\n  {\n    \"description\": \"Nothing to do with this transaction only store it\",\n    \"whenever\": \"is_received_do_transaction('notAnswerTransaction',_) and not(is_task_closed())\",\n    \"thenceforth\": \"add_message_transaction()\",\n    \"ontology\": null\n  },\n  {\n    \"description\": \"Nothing to do with this transaction only store it\",\n    \"whenever\": \"is_received_do_transaction('reportQuestionTransaction',_) and not(is_task_closed())\",\n    \"thenceforth\": \"add_message_transaction()\",\n    \"ontology\": null\n  },\n  {\n    \"description\": \"Nothing to do with this transaction only store it\",\n    \"whenever\": \"is_received_do_transaction('reportAnswerTransaction',_) and not(is_task_closed())\",\n    \"thenceforth\": \"add_message_transaction()\",\n    \"ontology\": null\n  }\n]\n")),(0,r.kt)("h3",{id:"community-norm"},"Community Norms"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n   {\n      "description": "Notify user of any received incentive",\n      "whenever": "is_received_send_incentive(Incentive)",\n      "thenceforth": "send_user_message(\'INCENTIVE\',Incentive)",\n      "ontology": null\n   }\n]\n')))}c.isMDXComponent=!0}}]);